options {
	JDK_VERSION = "1.8";
	UNICODE_INPUT = true;
	STATIC = false;
}


PARSER_BEGIN(ExpressionParser)

package com.utry.erule;

import java.io.StringReader;
import java.util.*;
import com.utry.alg.SearchAlg;

public class ExpressionParser {

     private String matchContent;

     public static void main(String[] args) {
           ExpressionParser parser = new ExpressionParser(System.in);
           boolean result =  parser.Start();
           System.out.println("The result is :" + result);
     }

     public void setContent(String content){
           this.matchContent = content;
     }
}

PARSER_END(ExpressionParser)

/***************************************************************
SKIP
***************************************************************/

SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


/***************************************************************
TOKENS
***************************************************************/

TOKEN : { <EOL : "\n" | "\r" | "\r\n" > }

TOKEN :
{
	<KEYWORD: <LETTER2>(<LETTER2>|<DIGIT2>)*>
	|
	< #LETTER2:
	[
		"\u0024",           // $
		"\u0041"-"\u005a",  // A - Z
		"\u005f",           // _
		"\u0061"-"\u007a",  // a - z
		"\u00c0"-"\u00d6",  // Upper case symbols of Latin-1 Supplement
		"\u00d8"-"\u00f6",  // Lower case symbols of Latin-1 Supplement
		"\u00f8"-"\u00ff",  // More lower case symbols of Latin-1 Supplement
		"\u0100"-"\u1fff",  // Many languages (including Greek)
		"\u3040"-"\u318f",  // Hiragana, Katakana, Bopomofo, Hangul Compatibility Jamo
		"\u3300"-"\u337f",  // CJK Compatibility
		"\u3400"-"\u3d2d",  // CJK Unified Ideographs Extension A
		"\u4e00"-"\u9fff",  // CJK Unified Ideographs
		"\uf900"-"\ufaff"   // CJK Compatibility Ideographs
	]
	>
	|
	< #DIGIT2: ["0"-"9"] >
}

/* OPERATORS */
TOKEN:
{
     <LPAREN: "(">
  |  <RPAREN: ")">
  |  <AND: "AND">
  |  <OR: "OR">
}

void Start(StringBuilder sb):
{
}
{
    Expression(sb)
}

void Expression(StringBuilder sb):
{
    boolean stepResult;
    boolean result ;
}
{
    result = Term()
    (
       <AND>
       stepResult = Term()
       { result = result && stepResult;}
     |
       <OR>
       stepResult = Term()
       { result = result || stepResult;}
    )*
    {return result;}
}

void Term():
{
    Token t;
    boolean result;
}
{
    t = <KEYWORD>
        { return SearchAlg.search(matchContent,t.image)>0; }
    |   <LPAREN> result = Expression() <RPAREN>
        { return result ; }
}
